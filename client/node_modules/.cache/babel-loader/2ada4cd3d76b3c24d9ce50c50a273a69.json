{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst useForm = () => {\n  _s();\n\n  const initialState = {\n    name: \"\",\n    email: \"\",\n    password: \"\"\n  };\n  const [form, setForm] = useState(initialState);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const setName = value => {\n    setForm(prev => ({ ...prev,\n      name: value\n    }));\n  };\n\n  const setEmail = value => {\n    setForm(prev => ({ ...prev,\n      email: value\n    }));\n  };\n\n  const setPassword = value => {\n    setForm(prev => ({ ...prev,\n      password: value\n    }));\n  };\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n\n      case \"email\":\n        setEmail(value);\n        break;\n\n      case \"password\":\n        setPassword(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const isSignUpFormValid = form.name !== \"\" && form.email !== \"\" && form.password !== \"\";\n  const isSignInFormValid = form.email !== \"\" && form.password !== \"\";\n  const isAccountFormValid = form.name !== \"\" || form.email !== \"\"; // Clear error message upon deletion of any form fields\n\n  useEffect(() => {\n    if (!isSignUpFormValid || !isSignInFormValid || isAccountFormValid) {\n      setErrorMessage(null);\n    }\n  }, [isSignUpFormValid, isSignInFormValid, isAccountFormValid]);\n  return {\n    initialState,\n    form,\n    setForm,\n    setName,\n    setEmail,\n    setPassword,\n    handleChange,\n    isSignUpFormValid,\n    isSignInFormValid,\n    isAccountFormValid,\n    errorMessage,\n    setErrorMessage\n  };\n};\n\n_s(useForm, \"JOpyDuRzxB4XgDU+MIyDHmCoOAE=\");\n\nexport default useForm;","map":{"version":3,"sources":["D:/webdev/Project/react/crypto-dashboard/client/src/hooks/form.js"],"names":["useState","useEffect","useForm","initialState","name","email","password","form","setForm","errorMessage","setErrorMessage","setName","value","prev","setEmail","setPassword","handleChange","e","target","isSignUpFormValid","isSignInFormValid","isAccountFormValid"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAMC,YAAY,GAAG;AACnBC,IAAAA,IAAI,EAAE,EADa;AAEnBC,IAAAA,KAAK,EAAE,EAFY;AAGnBC,IAAAA,QAAQ,EAAE;AAHS,GAArB;AAKA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAACG,YAAD,CAAhC;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,IAAD,CAAhD;;AAEA,QAAMW,OAAO,GAAIC,KAAD,IAAW;AACzBJ,IAAAA,OAAO,CAAEK,IAAD,KAAW,EAAE,GAAGA,IAAL;AAAWT,MAAAA,IAAI,EAAEQ;AAAjB,KAAX,CAAD,CAAP;AACD,GAFD;;AAIA,QAAME,QAAQ,GAAIF,KAAD,IAAW;AAC1BJ,IAAAA,OAAO,CAAEK,IAAD,KAAW,EAAE,GAAGA,IAAL;AAAWR,MAAAA,KAAK,EAAEO;AAAlB,KAAX,CAAD,CAAP;AACD,GAFD;;AAGA,QAAMG,WAAW,GAAIH,KAAD,IAAW;AAC7BJ,IAAAA,OAAO,CAAEK,IAAD,KAAW,EAAE,GAAGA,IAAL;AAAWP,MAAAA,QAAQ,EAAEM;AAArB,KAAX,CAAD,CAAP;AACD,GAFD;;AAIA,QAAMI,YAAY,GAAIC,CAAD,IAAO;AAC1B,UAAM;AAAEb,MAAAA,IAAF;AAAQQ,MAAAA;AAAR,QAAkBK,CAAC,CAACC,MAA1B;;AAEA,YAAQd,IAAR;AACE,WAAK,MAAL;AACEO,QAAAA,OAAO,CAACC,KAAD,CAAP;AACA;;AAEF,WAAK,OAAL;AACEE,QAAAA,QAAQ,CAACF,KAAD,CAAR;AACA;;AAEF,WAAK,UAAL;AACEG,QAAAA,WAAW,CAACH,KAAD,CAAX;AACA;;AAEF;AACE;AAdJ;AAgBD,GAnBD;;AAqBA,QAAMO,iBAAiB,GACrBZ,IAAI,CAACH,IAAL,KAAc,EAAd,IAAoBG,IAAI,CAACF,KAAL,KAAe,EAAnC,IAAyCE,IAAI,CAACD,QAAL,KAAkB,EAD7D;AAGA,QAAMc,iBAAiB,GAAGb,IAAI,CAACF,KAAL,KAAe,EAAf,IAAqBE,IAAI,CAACD,QAAL,KAAkB,EAAjE;AAEA,QAAMe,kBAAkB,GAAGd,IAAI,CAACH,IAAL,KAAc,EAAd,IAAoBG,IAAI,CAACF,KAAL,KAAe,EAA9D,CA9CoB,CAgDpB;;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACkB,iBAAD,IAAsB,CAACC,iBAAvB,IAA4CC,kBAAhD,EAAoE;AAClEX,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD;AACF,GAJQ,EAIN,CAACS,iBAAD,EAAoBC,iBAApB,EAAuCC,kBAAvC,CAJM,CAAT;AAMA,SAAO;AACLlB,IAAAA,YADK;AAELI,IAAAA,IAFK;AAGLC,IAAAA,OAHK;AAILG,IAAAA,OAJK;AAKLG,IAAAA,QALK;AAMLC,IAAAA,WANK;AAOLC,IAAAA,YAPK;AAQLG,IAAAA,iBARK;AASLC,IAAAA,iBATK;AAULC,IAAAA,kBAVK;AAWLZ,IAAAA,YAXK;AAYLC,IAAAA;AAZK,GAAP;AAcD,CArED;;GAAMR,O;;AAuEN,eAAeA,OAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useForm = () => {\r\n  const initialState = {\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n  const [form, setForm] = useState(initialState);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n  const setName = (value) => {\r\n    setForm((prev) => ({ ...prev, name: value }));\r\n  };\r\n\r\n  const setEmail = (value) => {\r\n    setForm((prev) => ({ ...prev, email: value }));\r\n  };\r\n  const setPassword = (value) => {\r\n    setForm((prev) => ({ ...prev, password: value }));\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n\r\n      case \"email\":\r\n        setEmail(value);\r\n        break;\r\n\r\n      case \"password\":\r\n        setPassword(value);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const isSignUpFormValid =\r\n    form.name !== \"\" && form.email !== \"\" && form.password !== \"\";\r\n\r\n  const isSignInFormValid = form.email !== \"\" && form.password !== \"\";\r\n\r\n  const isAccountFormValid = form.name !== \"\" || form.email !== \"\";\r\n\r\n  // Clear error message upon deletion of any form fields\r\n  useEffect(() => {\r\n    if (!isSignUpFormValid || !isSignInFormValid || isAccountFormValid) {\r\n      setErrorMessage(null);\r\n    }\r\n  }, [isSignUpFormValid, isSignInFormValid, isAccountFormValid]);\r\n\r\n  return {\r\n    initialState,\r\n    form,\r\n    setForm,\r\n    setName,\r\n    setEmail,\r\n    setPassword,\r\n    handleChange,\r\n    isSignUpFormValid,\r\n    isSignInFormValid,\r\n    isAccountFormValid,\r\n    errorMessage,\r\n    setErrorMessage,\r\n  };\r\n};\r\n\r\nexport default useForm;\r\n"]},"metadata":{},"sourceType":"module"}