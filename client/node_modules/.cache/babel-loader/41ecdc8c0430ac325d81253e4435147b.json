{"ast":null,"code":"var _jsxFileName = \"D:\\\\webdev\\\\Project\\\\react\\\\crypto-dashboard\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"; // Firebase\n\nimport { db } from \"./firebase/firebase.config\";\n/* import { collection, getDocs } from \"firebase/firestore\"; */\n// Components\n\nimport Dashboard from \"./components/Dashboard\";\nimport SignUp from \"./components/account/SignUp\";\nimport SignIn from \"./components/account/SignIn\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // states\n  const [coins, setCoins] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [open, setOpen] = useState(false);\n  const [isLogged, setIsLogged] = useState(false);\n  const [user, setUser] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(10);\n  useEffect(() => {\n    setIsLogged(JSON.parse(window.localStorage.getItem(\"userToken\")));\n  }, []);\n  useEffect(() => {\n    /*     const getUser = async () => {\r\n      const querySnapshot = await getDocs(collection(db, \"users\"));\r\n      querySnapshot.forEach((doc) => {\r\n        console.log(doc.id.email);\r\n      });\r\n    };\r\n      getUser(); */\n    window.localStorage.setItem(\"userToken\", isLogged); // CoinMarketCap API call\n\n    const cryptoApiOptions = {\n      method: \"GET\",\n      url: \"https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest\",\n      headers: {\n        \"X-CMC_PRO_API_KEY\": process.env.REACT_APP_COINMARKETCAP_API_KEY\n      }\n    };\n    axios.request(cryptoApiOptions).then(function (res) {\n      var parsedData = JSON.parse(JSON.stringify(res));\n      /*         console.log(parsedData); */\n\n      /*         console.log(parsedData.data.data); */\n\n      setCoins(parsedData.data.data);\n    }).catch(function (err) {\n      /*         console.error(err); */\n    }); // Coinranking API call\n\n    const coinRankingOptions = {\n      method: \"GET\",\n      url: \"https://coinranking1.p.rapidapi.com/coins\",\n      headers: {\n        \"x-rapidapi-host\": \"coinranking1.p.rapidapi.com\",\n        \"x-rapidapi-key\": process.env.REACT_APP_COINRANKING_API_KEY\n      }\n    };\n    axios.request(coinRankingOptions).then(function (res) {\n      var parsedData = JSON.parse(JSON.stringify(res));\n      console.log(parsedData.data.data);\n    }).catch(function (err) {\n      console.error(err);\n    });\n  }, [isLogged]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      basename: process.env.PUBLIC_URL,\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/signup\",\n          children: /*#__PURE__*/_jsxDEV(SignUp, {\n            user: user,\n            setUser: setUser,\n            name: name,\n            setName: setName,\n            email: email,\n            setEmail: setEmail,\n            password: password,\n            setPassword: setPassword,\n            errorMessage: errorMessage,\n            setErrorMessage: setErrorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), isLogged ? /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/dashboard\",\n          children: /*#__PURE__*/_jsxDEV(Dashboard, {\n            isLogged: isLogged,\n            setIsLogged: setIsLogged,\n            user: user,\n            setUser: setUser,\n            coins: coins,\n            search: search,\n            setSearch: setSearch,\n            open: open,\n            setOpen: setOpen,\n            currentPage: currentPage,\n            setCurrentPage: setCurrentPage,\n            itemsPerPage: itemsPerPage,\n            setItemsPerPage: setItemsPerPage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          exact: true,\n          children: /*#__PURE__*/_jsxDEV(SignIn, {\n            isLogged: isLogged,\n            setIsLogged: setIsLogged,\n            user: user,\n            setUser: setUser,\n            email: email,\n            setEmail: setEmail,\n            password: password,\n            setPassword: setPassword,\n            errorMessage: errorMessage,\n            setErrorMessage: setErrorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"fAAcJ0vHbeq1XsU8pLHnURXR394=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/webdev/Project/react/crypto-dashboard/client/src/App.js"],"names":["React","useState","useEffect","axios","BrowserRouter","Router","Switch","Route","db","Dashboard","SignUp","SignIn","App","coins","setCoins","search","setSearch","open","setOpen","isLogged","setIsLogged","user","setUser","name","setName","email","setEmail","password","setPassword","errorMessage","setErrorMessage","currentPage","setCurrentPage","itemsPerPage","setItemsPerPage","JSON","parse","window","localStorage","getItem","setItem","cryptoApiOptions","method","url","headers","process","env","REACT_APP_COINMARKETCAP_API_KEY","request","then","res","parsedData","stringify","data","catch","err","coinRankingOptions","REACT_APP_COINRANKING_API_KEY","console","log","error","PUBLIC_URL"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\n// Firebase\r\nimport { db } from \"./firebase/firebase.config\";\r\n/* import { collection, getDocs } from \"firebase/firestore\"; */\r\n\r\n// Components\r\nimport Dashboard from \"./components/Dashboard\";\r\nimport SignUp from \"./components/account/SignUp\";\r\nimport SignIn from \"./components/account/SignIn\";\r\n\r\nconst App = () => {\r\n  // states\r\n  const [coins, setCoins] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [open, setOpen] = useState(false);\r\n  const [isLogged, setIsLogged] = useState(false);\r\n  const [user, setUser] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n\r\n  useEffect(() => {\r\n    setIsLogged(JSON.parse(window.localStorage.getItem(\"userToken\")));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    /*     const getUser = async () => {\r\n      const querySnapshot = await getDocs(collection(db, \"users\"));\r\n      querySnapshot.forEach((doc) => {\r\n        console.log(doc.id.email);\r\n      });\r\n    };\r\n\r\n    getUser(); */\r\n\r\n    window.localStorage.setItem(\"userToken\", isLogged);\r\n\r\n    // CoinMarketCap API call\r\n    const cryptoApiOptions = {\r\n      method: \"GET\",\r\n      url: \"https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest\",\r\n      headers: {\r\n        \"X-CMC_PRO_API_KEY\": process.env.REACT_APP_COINMARKETCAP_API_KEY,\r\n      },\r\n    };\r\n\r\n    axios\r\n      .request(cryptoApiOptions)\r\n      .then(function (res) {\r\n        var parsedData = JSON.parse(JSON.stringify(res));\r\n        /*         console.log(parsedData); */\r\n        /*         console.log(parsedData.data.data); */\r\n        setCoins(parsedData.data.data);\r\n      })\r\n      .catch(function (err) {\r\n        /*         console.error(err); */\r\n      });\r\n\r\n    // Coinranking API call\r\n    const coinRankingOptions = {\r\n      method: \"GET\",\r\n      url: \"https://coinranking1.p.rapidapi.com/coins\",\r\n      headers: {\r\n        \"x-rapidapi-host\": \"coinranking1.p.rapidapi.com\",\r\n        \"x-rapidapi-key\": process.env.REACT_APP_COINRANKING_API_KEY,\r\n      },\r\n    };\r\n\r\n    axios\r\n      .request(coinRankingOptions)\r\n      .then(function (res) {\r\n        var parsedData = JSON.parse(JSON.stringify(res));\r\n        console.log(parsedData.data.data);\r\n      })\r\n      .catch(function (err) {\r\n        console.error(err);\r\n      });\r\n  }, [isLogged]);\r\n\r\n  return (\r\n    <>\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n          <Route path=\"/signup\">\r\n            <SignUp\r\n              user={user}\r\n              setUser={setUser}\r\n              name={name}\r\n              setName={setName}\r\n              email={email}\r\n              setEmail={setEmail}\r\n              password={password}\r\n              setPassword={setPassword}\r\n              errorMessage={errorMessage}\r\n              setErrorMessage={setErrorMessage}\r\n            />\r\n          </Route>\r\n\r\n          {isLogged ? (\r\n            <Route path=\"/dashboard\">\r\n              <Dashboard\r\n                isLogged={isLogged}\r\n                setIsLogged={setIsLogged}\r\n                user={user}\r\n                setUser={setUser}\r\n                coins={coins}\r\n                search={search}\r\n                setSearch={setSearch}\r\n                open={open}\r\n                setOpen={setOpen}\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                itemsPerPage={itemsPerPage}\r\n                setItemsPerPage={setItemsPerPage}\r\n              />\r\n            </Route>\r\n          ) : (\r\n            <Route path=\"/\" exact>\r\n              <SignIn\r\n                isLogged={isLogged}\r\n                setIsLogged={setIsLogged}\r\n                user={user}\r\n                setUser={setUser}\r\n                email={email}\r\n                setEmail={setEmail}\r\n                password={password}\r\n                setPassword={setPassword}\r\n                errorMessage={errorMessage}\r\n                setErrorMessage={setErrorMessage}\r\n              />\r\n            </Route>\r\n          )}\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}