{"ast":null,"code":"var _jsxFileName = \"D:\\\\webdev\\\\Project\\\\react\\\\crypto-dashboard\\\\client\\\\src\\\\components\\\\LineChart.js\";\nimport React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LineChart = ({\n  history\n}) => {\n  /*   const ctx = canvas.getContext(\"2d\");\r\n  const gradient = ctx.createLinearGradient(0, 0, 0, 500);\r\n  gradient.addColorStop(0, \"rgba(34, 153, 84,0.4)\");\r\n  gradient.addColorStop(1, \"rgba(34, 153, 84,0.01)\"); // rgba color is required. */\n  const data = {\n    labels: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    datasets: [{\n      data: [25.0, 32.4, 22.2, 39.4, 34.2, 22.0, 23.2, 44.1, 20.0, 18.4, 19.1, 17.4],\n      fill: true,\n      backgroundColor: \"lightblue\",\n      borderColor: \"#218c74\",\n      borderWidth: 3\n    }]\n  };\n  const options = {\n    scales: {\n      y: {\n        display: false\n      },\n      x: {\n        display: false\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      }\n    },\n    radius: 0,\n    tension: 0.4\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: history.map(result => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: data,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)\n      }, void 0, false);\n    })\n  }, void 0, false);\n};\n\n_c = LineChart;\nexport default LineChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"sources":["D:/webdev/Project/react/crypto-dashboard/client/src/components/LineChart.js"],"names":["React","Line","LineChart","history","data","labels","datasets","fill","backgroundColor","borderColor","borderWidth","options","scales","y","display","x","plugins","legend","radius","tension","map","result"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,iBAArB;;;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AACjC;AACF;AACA;AACA;AAEE,QAAMC,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CADG;AAEXC,IAAAA,QAAQ,EAAE,CACR;AACEF,MAAAA,IAAI,EAAE,CACJ,IADI,EACE,IADF,EACQ,IADR,EACc,IADd,EACoB,IADpB,EAC0B,IAD1B,EACgC,IADhC,EACsC,IADtC,EAC4C,IAD5C,EACkD,IADlD,EACwD,IADxD,EAEJ,IAFI,CADR;AAKEG,MAAAA,IAAI,EAAE,IALR;AAMEC,MAAAA,eAAe,EAAE,WANnB;AAOEC,MAAAA,WAAW,EAAE,SAPf;AAQEC,MAAAA,WAAW,EAAE;AARf,KADQ;AAFC,GAAb;AAgBA,QAAMC,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAE;AACNC,MAAAA,CAAC,EAAE;AACDC,QAAAA,OAAO,EAAE;AADR,OADG;AAINC,MAAAA,CAAC,EAAE;AACDD,QAAAA,OAAO,EAAE;AADR;AAJG,KADM;AASdE,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE;AACNH,QAAAA,OAAO,EAAE;AADH;AADD,KATK;AAcdI,IAAAA,MAAM,EAAE,CAdM;AAedC,IAAAA,OAAO,EAAE;AAfK,GAAhB;AAkBA,sBACE;AAAA,cACGhB,OAAO,CAACiB,GAAR,CAAaC,MAAD,IAAY;AACvB,0BACE;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,IAAI,EAAEjB,IAAZ;AAAkB,UAAA,OAAO,EAAEO;AAA3B;AAAA;AAAA;AAAA;AAAA;AADF,uBADF;AAKD,KANA;AADH,mBADF;AAWD,CAnDD;;KAAMT,S;AAqDN,eAAeA,SAAf","sourcesContent":["import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nconst LineChart = ({ history }) => {\r\n  /*   const ctx = canvas.getContext(\"2d\");\r\n  const gradient = ctx.createLinearGradient(0, 0, 0, 500);\r\n  gradient.addColorStop(0, \"rgba(34, 153, 84,0.4)\");\r\n  gradient.addColorStop(1, \"rgba(34, 153, 84,0.01)\"); // rgba color is required. */\r\n\r\n  const data = {\r\n    labels: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n    datasets: [\r\n      {\r\n        data: [\r\n          25.0, 32.4, 22.2, 39.4, 34.2, 22.0, 23.2, 44.1, 20.0, 18.4, 19.1,\r\n          17.4,\r\n        ],\r\n        fill: true,\r\n        backgroundColor: \"lightblue\",\r\n        borderColor: \"#218c74\",\r\n        borderWidth: 3,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    scales: {\r\n      y: {\r\n        display: false,\r\n      },\r\n      x: {\r\n        display: false,\r\n      },\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n    },\r\n    radius: 0,\r\n    tension: 0.4,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {history.map((result) => {\r\n        return (\r\n          <>\r\n            <Line data={data} options={options} />\r\n          </>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LineChart;\r\n"]},"metadata":{},"sourceType":"module"}