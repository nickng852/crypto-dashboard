{"ast":null,"code":"// Redux Toolkit\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport authReducer from \"../features/auth/authSlice\";\nimport coinsReducer from \"../features/coins/coinsSlice\";\nimport newsReducer from \"../features/news/newsSlice\"; // RTK Query\n\nimport { setupListeners } from \"@reduxjs/toolkit/query\";\nimport { cryptoApi } from \"../services/cryptoApi\";\nexport const store = configureStore({\n  reducer: {\n    auth: authReducer,\n    coins: coinsReducer,\n    news: newsReducer,\n    [cryptoApi.reducerPath]: cryptoApi.reducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: false\n  }).concat(cryptoApi.middleware)\n});\nsetupListeners(store.dispatch);\nexport default store;","map":{"version":3,"sources":["D:/webdev/Project/react/crypto-dashboard/client/src/app/store.js"],"names":["configureStore","authReducer","coinsReducer","newsReducer","setupListeners","cryptoApi","store","reducer","auth","coins","news","reducerPath","middleware","getDefaultMiddleware","serializableCheck","concat","dispatch"],"mappings":"AAAA;AACA,SAASA,cAAT,QAA+B,kBAA/B;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,WAAP,MAAwB,4BAAxB,C,CAEA;;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,OAAO,MAAMC,KAAK,GAAGN,cAAc,CAAC;AAClCO,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAEP,WADC;AAEPQ,IAAAA,KAAK,EAAEP,YAFA;AAGPQ,IAAAA,IAAI,EAAEP,WAHC;AAIP,KAACE,SAAS,CAACM,WAAX,GAAyBN,SAAS,CAACE;AAJ5B,GADyB;AAOlCK,EAAAA,UAAU,EAAGC,oBAAD,IACVA,oBAAoB,CAAC;AACnBC,IAAAA,iBAAiB,EAAE;AADA,GAAD,CAApB,CAEGC,MAFH,CAEUV,SAAS,CAACO,UAFpB;AARgC,CAAD,CAA5B;AAaPR,cAAc,CAACE,KAAK,CAACU,QAAP,CAAd;AAEA,eAAeV,KAAf","sourcesContent":["// Redux Toolkit\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport authReducer from \"../features/auth/authSlice\";\r\nimport coinsReducer from \"../features/coins/coinsSlice\";\r\nimport newsReducer from \"../features/news/newsSlice\";\r\n\r\n// RTK Query\r\nimport { setupListeners } from \"@reduxjs/toolkit/query\";\r\nimport { cryptoApi } from \"../services/cryptoApi\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    auth: authReducer,\r\n    coins: coinsReducer,\r\n    news: newsReducer,\r\n    [cryptoApi.reducerPath]: cryptoApi.reducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: false,\r\n    }).concat(cryptoApi.middleware),\r\n});\r\n\r\nsetupListeners(store.dispatch);\r\n\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}